---

- name: set known hosts
  template: src=templates/known_hosts.j2 dest="/home/{{ ogs_admin_user }}/.ssh/known_hosts" owner={{ ogs_admin_user }} group={{ ogs_group }} mode=0644

- name: ensure working directory for BerkeleyDB setup exists
  file: path=/opt/berkeleydb state=directory owner={{ ogs_admin_user }} group={{ ogs_group }} mode=0755

- name: download BerkeleyDB source
  get_url:
    url=http://download.oracle.com/berkeley-db/db-4.4.20.tar.gz
    dest=/opt/berkeleydb/db-4.4.20.tar.gz

- name: unpack BerkeleyDB source
  unarchive:
    copy=no
    src=/opt/berkeleydb/db-4.4.20.tar.gz
    dest=/opt/berkeleydb
    creates=/opt/berkeleydb/db-4.4.20/README
    owner={{ ogs_admin_user }}
    group={{ ogs_group }}

- name: create BerkeleyDB build directory
  file: path=/opt/berkeleydb/db-4.4.20/build state=directory owner={{ ogs_admin_user }} group={{ ogs_group }}

- name: configure BerkeleyDB
  shell: ../dist/configure --enable-rpc
  args:
    chdir: /opt/berkeleydb/db-4.4.20/build
    creates: /opt/berkeleydb/db-4.4.20/build/Makefile

- name: compile BerkeleyDB
  shell: make
  args:
    chdir: /opt/berkeleydb/db-4.4.20/build
    creates: /opt/berkeleydb/db-4.4.20/build/db_verify

- name: install BerkeleyDB
  become: yes
  shell: make install
  args:
    chdir: /opt/berkeleydb/db-4.4.20/build
    creates: /usr/local/BerkeleyDB.4.4/bin/db_verify

- name: ensure directory for IzPack exists
  file: path=/opt/izpack state=directory owner={{ ogs_admin_user }} group={{ ogs_group }} mode=0755

- name: download IzPack
  get_url:
    url=http://bioteam.net/wp-content/uploads/misc/Izpack-1.4.4.tar.gz
    dest=/opt/izpack/Izpack-1.4.4.tar.gz

- name: unpack IzPack
  unarchive:
    copy=no
    src=/opt/izpack/Izpack-1.4.4.tar.gz
    dest=/opt/izpack
    creates=/opt/izpack/Izpack-1.4.4/swing-layout-1.0.3.jar
    owner={{ ogs_admin_user }}
    group={{ ogs_group }}

- name: ensure nfs share exists
  file: path=/nfs/ogs state=directory owner={{ ogs_admin_user }} group={{ ogs_group }} mode=0755

- name: ensure working directory exists
  file: path=/opt/ogs state=directory owner={{ ogs_admin_user }} group={{ ogs_group }} mode=0755

- name: set expected download filename
  set_fact: ogs_source_pkg=/opt/ogs/{{ ogs_version }}.tar.gz

- name: set expected source directory
  set_fact: ogs_source_dir={{ ogs_source_pkg|dirname }}/{{ ogs_version }}/source

- name: download source code
  become_user: "{{ ogs_admin_user }}"
  get_url:
    url=http://downloads.sourceforge.net/project/gridscheduler/{{ ogs_version }}/{{ ogs_version }}.tar.gz
    dest={{ ogs_source_pkg }}

- name: unpack source code
  unarchive:
    copy=no
    src={{ ogs_source_pkg }}
    dest={{ ogs_source_pkg|dirname }}
    creates={{ ogs_source_pkg|dirname }}/{{ ogs_version }}/Changelog
    owner={{ ogs_admin_user }}
    group={{ ogs_group }}

- name: ensure IzPack path in build.properties is correct
  lineinfile:
    backup=yes
    state=present
    dest={{ ogs_source_dir }}/build.properties
    regexp="^izpack.home="
    line="izpack.home=/opt/izpack/Izpack-1.4.4"

- name: ensure Swing path in GUI installer project.properties is correct
  lineinfile:
    backup=yes
    state=present
    dest={{ ogs_source_dir }}/clients/gui-installer/nbproject/project.properties
    regexp="^libs.swing-layout.classpath="
    line="libs.swing-layout.classpath=${izpack.home}/swing-layout-1.0.3.jar"

- name: ensure ANT path in GUI installer project.properties is correct
  lineinfile:
    backup=yes
    state=present
    dest={{ ogs_source_dir }}/clients/gui-installer/nbproject/project.properties
    regexp="^libs.ant.classpath="
    line="libs.ant.classpath=${izpack.home}/ant.jar"

- name: copy aimk.private file
  copy:
    src=files/aimk.private
    dest={{ ogs_source_dir }}/aimk.private
    owner={{ ogs_admin_user }}
    group={{ ogs_group }}
    mode=0644

- name: build sge_depend
  shell: ./aimk -only-depend
  args:
    chdir: "{{ ogs_source_dir }}"
    creates: "{{ ogs_source_dir }}/3rdparty/sge_depend/LINUXX64/sge_depend"
    executable: /bin/bash

- name: create dependency files
  shell: scripts/zerodepend && ./aimk depend
  args:
    chdir: "{{ ogs_source_dir }}"
    creates: "{{ ogs_source_dir }}/clients/qacct/qacct_dependencies"
    executable: /bin/bash

- name: ensure ncurses is listed as linked library for qtcsh
  lineinfile:
    backup=yes
    state=present
    dest={{ ogs_source_dir }}/aimk
    regexp='^   set SGE_LIBS = "-lsge -lpthread'
    line='   set SGE_LIBS = "-lsge -lpthread -lncurses"'

- name: compile executables
  shell: ./aimk -sys-libssl
  args:
    chdir: "{{ ogs_source_dir }}"
    creates: "{{ ogs_source_dir }}/3rdparty/qmake/LINUXX64/make"
    executable: /bin/bash

- name: create man pages
  shell: ./aimk -man
  args:
    chdir: "{{ ogs_source_dir }}"
    creates: "{{ ogs_source_dir }}/MANSBUILD_ge/ASCMAN/man/man8/sge_st"
    executable: /bin/bash

- name: copy distinst.private file
  copy:
    src=files/distinst.private
    dest={{ ogs_source_dir }}/distinst.private
    owner={{ ogs_admin_user }}
    group={{ ogs_group }}
    mode=0644

- name: copy ogs.sh file
  copy:
    src=files/ogs.sh
    dest=/etc/profile.d/ogs.sh

- name: install executables
  shell: ./scripts/distinst -local -allall -noexit -y linux-x64
  args:
    chdir: "{{ ogs_source_dir }}"
    creates: /nfs/ogs/bin/linux-x64/qstat
    executable: /bin/bash
  environment:
    SGE_ROOT: /nfs/ogs

- name: copy setup configuration
  template:
    src=templates/inst_template.conf.j2
    dest=/nfs/ogs/inst_config.txt
    owner={{ ogs_admin_user }}
    group={{ ogs_group }}
    mode=0644
